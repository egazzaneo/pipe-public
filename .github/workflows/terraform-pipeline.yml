# Terraform Pipeline 
name: 'Terraform Pipeline'

on:
  # Auto-trigger on changes to environments or workflows
  push:
    branches: [ "main" ]
    paths:
      - 'environments/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'environments/**'
      - '.github/workflows/**'
  # Manual trigger with action and environment selection
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
      target:
        description: 'Target to execute (leave empty for all)'
        required: false
        type: string

permissions:
  contents: read

env:
  TARGETS_DIR: 'environments'
  TERRAFORM_VERSION: 'latest'

jobs:
  # Find available targets dynamically
  discover:
    name: 'Discover Targets'
    runs-on: ubuntu-latest
    outputs:
      target_array: ${{ steps.get-target.outputs.target_array }}
      targets_dir: ${{ steps.get-target.outputs.targets_dir }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get targets
      id: get-target
      shell: bash
      run: |
        TARGETS_DIR="${{ env.TARGETS_DIR }}"
        if [ -n "${{ github.event.inputs.target }}" ]; then
          echo "🎯 Target: ${{ github.event.inputs.target }}"
          echo "target_array=[\"${{ github.event.inputs.target }}\"]" >> $GITHUB_OUTPUT
        else
          targets=$(ls -1 $TARGETS_DIR/ | jq -R -s -c 'split("\n")[:-1]')
          echo "🔍 Discovered targets:"
          echo "$targets" | jq -r '.[]' | sed 's/^/  - /'
          echo "target_array=$targets" >> $GITHUB_OUTPUT
        fi
        echo "targets_dir=$TARGETS_DIR" >> $GITHUB_OUTPUT

  # Validate Terraform syntax and configuration
  terraform-validate:
    name: 'Validate ${{ matrix.target }}'
    runs-on: ubuntu-latest
    needs: discover
    if: github.event_name == 'push' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(needs.discover.outputs.target_array) }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Init
      run: |
        set -e
        terraform init -input=false
      working-directory: ./${{ needs.discover.outputs.targets_dir }}/${{ matrix.target }}

    - name: Terraform Validate
      run: |
        set -e
        terraform validate
      working-directory: ./${{ needs.discover.outputs.targets_dir }}/${{ matrix.target }}

  # Generate execution plan for changes
  terraform-plan:
    name: 'Plan ${{ matrix.target }}'
    runs-on: ubuntu-latest
    needs: [discover, terraform-validate]
    if: |
      (needs.terraform-validate.result == 'success' || needs.terraform-validate.result == 'skipped') && (
        github.event_name == 'push' ||
        github.event_name == 'pull_request' ||
        (github.event_name == 'workflow_dispatch' && (github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'))
      )
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(needs.discover.outputs.target_array) }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Init
      run: |
        set -e
        terraform init -input=false
      working-directory: ./${{ needs.discover.outputs.targets_dir }}/${{ matrix.target }}

    - name: Terraform Plan
      run: |
        set -e
        terraform plan -out=tfplan
      working-directory: ./${{ needs.discover.outputs.targets_dir }}/${{ matrix.target }}

    # Save plan for apply job
    - name: Upload Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan-${{ matrix.target }}
        path: ./${{ needs.discover.outputs.targets_dir }}/${{ matrix.target }}/tfplan

  # Apply planned changes (manual only)
  terraform-apply:
    name: 'Apply ${{ matrix.target }}'
    runs-on: ubuntu-latest
    needs: [discover, terraform-plan]
    if: |
      needs.terraform-plan.result == 'success' &&
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.action == 'apply'
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(needs.discover.outputs.target_array) }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # Get plan from previous job
    - name: Download Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan-${{ matrix.target }}
        path: ./${{ needs.discover.outputs.targets_dir }}/${{ matrix.target }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Init
      run: |
        set -e
        terraform init -input=false
      working-directory: ./${{ needs.discover.outputs.targets_dir }}/${{ matrix.target }}

    - name: Terraform Apply
      run: |
        set -e
        terraform apply -input=false tfplan
      working-directory: ./${{ needs.discover.outputs.targets_dir }}/${{ matrix.target }}